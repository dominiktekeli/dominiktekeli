{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww29200\viewh15880\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include <WiFi.h>\
#include <PubSubClient.h>\
\
const char* ssid = \'93Uc_Iot17\'94;\
const char* password = \'93teleinformatika\'94;\
const char* mqtt_server = "IP_adresa_MQTT_brokera"; // IP adresa nebo dom\'e9na MQTT brokera\
const int sensorPin = 12; // Pin, ke kter\'e9mu je p\uc0\u345 ipojen senzor pohybu\
\
WiFiClient espClient;\
PubSubClient client(espClient);\
\
unsigned long lastMovementTime = 0;\
unsigned long unoccupiedStartTime = 0;\
const unsigned long unoccupiedDelay = 300000; // 5 minut v milisekund\'e1ch\
boolean seatOccupied = false;\
\
void setup_wifi() \{\
  delay(10);\
  Serial.println();\
  Serial.print("Connecting to ");\
  Serial.println(ssid);\
  WiFi.begin(ssid, password);\
  while (WiFi.status() != WL_CONNECTED) \{\
    delay(500);\
    Serial.print(".");\
  \}\
  Serial.println("");\
  Serial.println("WiFi connected");\
  Serial.println("IP address: ");\
  Serial.println(WiFi.localIP());\
\}\
\
void reconnect() \{\
  while (!client.connected()) \{\
    Serial.print("Attempting MQTT connection...");\
    if (client.connect("ESP32Client")) \{\
      Serial.println("connected");\
    \} else \{\
      Serial.print("failed, rc=");\
      Serial.print(client.state());\
      Serial.println(" try again in 5 seconds");\
      delay(5000);\
    \}\
  \}\
\}\
\
void setup() \{\
  Serial.begin(115200);\
  pinMode(sensorPin, INPUT);\
  setup_wifi();\
  client.setServer(mqtt_server, 1883);\
\}\
\
void loop() \{\
  if (!client.connected()) \{\
    reconnect();\
  \}\
  client.loop();\
\
  int sensorValue = digitalRead(sensorPin);\
\
  if (sensorValue == HIGH) \{\
    lastMovementTime = millis();\
    seatOccupied = true;\
    unoccupiedStartTime = 0; // Resetujeme \uc0\u269 as neobsazen\'ed, pokud byl senzor aktivov\'e1n\
  \}\
\
  if (seatOccupied && millis() - lastMovementTime > unoccupiedDelay) \{\
    seatOccupied = false;\
    unoccupiedStartTime = millis(); // Za\uc0\u269 neme po\u269 \'edtat 5 minut od okam\'9eiku, kdy m\'edsto bylo uvoln\u283 no\
  \}\
\
  // Odesl\'e1n\'ed stavu obsazen\'ed p\uc0\u345 es MQTT, ale jen pokud u\'9e uplynulo 5 minut od uvoln\u283 n\'ed\
  if (!seatOccupied && unoccupiedStartTime > 0 && millis() - unoccupiedStartTime > unoccupiedDelay) \{\
    client.publish("misto/obsazeno", "false");\
    unoccupiedStartTime = 0; // Resetujeme \uc0\u269 as uvoln\u283 n\'ed\
  \} else if (seatOccupied) \{\
    client.publish("misto/obsazeno", "true");\
  \}\
\
  delay(1000);\
\}\
}